# Generated by Django 5.1.6 on 2025-07-11 06:33

import uuid

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="GameRecord",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, verbose_name="date joined")),
                ("updated_at", models.DateTimeField(auto_now=True, verbose_name="last update")),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                        verbose_name="game record identifier",
                    ),
                ),
                (
                    "score",
                    models.IntegerField(
                        default=0,
                        help_text="Score achieved in the game, based on performance",
                        validators=[
                            django.core.validators.MinValueValidator(0, "Score cannot be negative"),
                            django.core.validators.MaxValueValidator(
                                1000, "Score cannot exceed 1000"
                            ),
                        ],
                        verbose_name="score",
                    ),
                ),
                (
                    "hints_used",
                    models.IntegerField(
                        default=0,
                        help_text="Number of hints used during the game",
                        validators=[
                            django.core.validators.MinValueValidator(
                                0, "Hints used cannot be negative"
                            ),
                            django.core.validators.MaxValueValidator(
                                3, "Hints used cannot exceed 3"
                            ),
                        ],
                        verbose_name="hints used",
                    ),
                ),
                (
                    "checks_used",
                    models.IntegerField(
                        default=0,
                        help_text="Number of checks used during the game",
                        validators=[
                            django.core.validators.MinValueValidator(
                                0, "Checks used cannot be negative"
                            ),
                            django.core.validators.MaxValueValidator(
                                3, "Checks used cannot exceed 3"
                            ),
                        ],
                        verbose_name="checks used",
                    ),
                ),
                (
                    "deletions",
                    models.IntegerField(
                        default=0,
                        help_text="Amount of times a user deleted a cell during the game",
                        validators=[
                            django.core.validators.MinValueValidator(
                                0, "Deletions made cannot be negative"
                            )
                        ],
                        verbose_name="deletions",
                    ),
                ),
                (
                    "time_taken",
                    models.IntegerField(
                        help_text="Total time taken to complete the game in seconds",
                        validators=[
                            django.core.validators.MinValueValidator(
                                0, "Time taken made cannot be negative"
                            )
                        ],
                        verbose_name="time taken (seconds)",
                    ),
                ),
                (
                    "won",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if the player won the game",
                        verbose_name="won",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("abandoned", "Abandoned"),
                            ("stopped", "Stopped"),
                        ],
                        default="in_progress",
                        max_length=11,
                        verbose_name="status",
                    ),
                ),
                (
                    "original_puzzle",
                    models.CharField(
                        help_text="The initial puzzle state",
                        max_length=81,
                        validators=[
                            django.core.validators.MinLengthValidator(
                                81, "Puzzle must be exactly 81 characters"
                            ),
                            django.core.validators.MaxLengthValidator(
                                81, "Puzzle must be exactly 81 characters"
                            ),
                        ],
                        verbose_name="original puzzle",
                    ),
                ),
                (
                    "solution",
                    models.CharField(
                        help_text="The solution to the Sudoku puzzle",
                        max_length=81,
                        validators=[
                            django.core.validators.MinLengthValidator(
                                81, "Puzzle must be exactly 81 characters"
                            ),
                            django.core.validators.MaxLengthValidator(
                                81, "Puzzle must be exactly 81 characters"
                            ),
                        ],
                        verbose_name="solution",
                    ),
                ),
                (
                    "final_state",
                    models.CharField(
                        help_text="Player's final state",
                        max_length=81,
                        validators=[
                            django.core.validators.MinLengthValidator(
                                81, "Puzzle must be exactly 81 characters"
                            ),
                            django.core.validators.MaxLengthValidator(
                                81, "Puzzle must be exactly 81 characters"
                            ),
                        ],
                        verbose_name="final state",
                    ),
                ),
                (
                    "started_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Timestamp when the game started",
                        null=True,
                        verbose_name="started at",
                    ),
                ),
                (
                    "completed_at",
                    models.DateTimeField(
                        blank=True,
                        help_text="Timestamp when the game finished",
                        null=True,
                        verbose_name="completed at",
                    ),
                ),
            ],
            options={
                "verbose_name": "game record",
                "verbose_name_plural": "game records",
            },
        ),
    ]
